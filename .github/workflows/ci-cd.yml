name: Deploy Production

on:
  push:
    branches: [main, production]
    tags:
      - "v*"
  pull_request:
    types: [closed]
    branches: [production]

jobs:
  build-backend:
    if: |
      (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)) &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production/backend' || startsWith(github.ref, 'refs/tags/'))
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 15
    outputs:
      app_version: ${{ steps.set-version.outputs.app_version }}
      env: ${{ steps.set-version.outputs.env }}

    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4

      - name: ÔøΩ Set version and environment
        id: set-version
        run: |
          # Determine version based on trigger
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=$(echo ${{ github.ref }} | sed 's|refs/tags/||')
            ENV="production"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            VERSION="latest"
            ENV="production"
          else
            VERSION="dev"
            ENV="staging"
          fi

          echo "app_version=$VERSION" >> $GITHUB_OUTPUT
          echo "env=$ENV" >> $GITHUB_OUTPUT
          echo "Version: $VERSION, Environment: $ENV"

      - name:  Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      - name: üìù Generate .env file for production
        run: |
          cat <<EOF > .env
          ENVIRONMENT=production
          SERVER_NAME=${{ vars.SERVER_NAME }}
          SERVER_HOST=${{ vars.SERVER_HOST }}
          PROJECT_NAME=${{ vars.PROJECT_NAME }}
          FIRST_SUPERUSER=${{ secrets.FIRST_SUPERUSER }}
          FIRST_SUPERUSER_PASSWORD=${{ secrets.FIRST_SUPERUSER_PASSWORD }}
          FIRST_SUPERUSER_PHONE=${{ secrets.FIRST_SUPERUSER_PHONE }}
          USERS_OPEN_REGISTRATION=False
          ACCESS_TOKEN_SECRET=${{ secrets.SSH_PRIVATE_KEY }}
          BACKEND_CORS_ORIGINS=${{ vars.BACKEND_CORS_ORIGINS }}
          ACCESS_TOKEN_EXPIRE_MINUTES=${{ vars.ACCESS_TOKEN_EXPIRE_MINUTES }}
          REFRESH_TOKEN_EXPIRE_MINUTES=${{ vars.REFRESH_TOKEN_EXPIRE_MINUTES }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_SERVER=${{ vars.POSTGRES_SERVER }}
          POSTGRES_PORT=${{ vars.POSTGRES_PORT }}
          POSTGRES_SSL_MODE=${{ vars.POSTGRES_SSL_MODE }}
          POSTGRES_CONNECT_TIMEOUT=${{ vars.POSTGRES_CONNECT_TIMEOUT }}
          UVICORN_HOST=${{ vars.UVICORN_HOST }}
          UVICORN_PORT=${{ vars.UVICORN_PORT }}
          UVICORN_LOG_LEVEL=${{ vars.UVICORN_LOG_LEVEL }}
 
          EOF

      - name: üöÄ Run build script and push image
        run: |
          chmod +x build.sh
          # Build and normalize image name to use underscores instead of hyphens
          REPO_SAN=$(echo "${{ github.repository }}" | sed 's/-/_/g')
          ./build.sh \
            --env "${{ steps.set-version.outputs.env }}" \
            --version "${{ steps.set-version.outputs.app_version }}" \
            --push \
            --registry "ghcr.io" \
            --name "${REPO_SAN}" \
            --deploy-tag deploy

      - name: üè∑Ô∏è Tag production image
        if: success()
        run: |
          # Pull the built image and tag it for deployment (normalize repo name)
          REPO_SAN=$(echo "${{ github.repository }}" | sed 's/-/_/g')
          docker pull ghcr.io/${REPO_SAN}:${{ steps.set-version.outputs.app_version }}-${{ steps.set-version.outputs.env }}
          docker tag ghcr.io/${REPO_SAN}:${{ steps.set-version.outputs.app_version }}-${{ steps.set-version.outputs.env }} ghcr.io/${REPO_SAN}:deploy
          docker push ghcr.io/${REPO_SAN}:deploy
          echo "Pushed deployment tag: ghcr.io/${REPO_SAN}:deploy"

  deploy-backend:
    needs: build-backend
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Debug check
        run: |

          echo "HOST is: ${{vars.SERVER_HOST}}"
          echo "USERNAME is: ${{ vars.SERVER_NAME }}" 
          echo "SSH_KEY is: ${{ secrets.SSH_PRIVATE_KEY }}"
          echo "FIRST_SUPER_USER is: ${{ secrets.FIRST_SUPERUSER }}"

      - name: Deploy to DigitalOcean
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ vars.SERVER_HOST }}
          username: ${{ vars.SERVER_NAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            echo "[$(date)] Starting deployment..."
            # Set the image name for deployment
            REPO_SAN=$(echo "${{ github.repository }}" | sed 's/-/_/g')
            export DEPLOY_IMAGE="ghcr.io/${REPO_SAN}:deploy"
            ./deploy.sh
