"""add_token_table

Revision ID: 95286a74982e
Revises: d9b2e3b5bc3e
Create Date: 2025-09-28 21:24:37.384152

"""

from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes


# revision identifiers, used by Alembic.
revision = "95286a74982e"
down_revision = "d9b2e3b5bc3e"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "tokenblacklist",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "token", sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=False
        ),
        sa.Column(
            "token_type",
            sa.Enum(
                "access",
                "refresh",
                "password_reset",
                "email_verification",
                "api",
                name="tokentype",
            ),
            nullable=False,
        ),
        sa.Column(
            "reason", sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True
        ),
        sa.Column("blacklisted_at", sa.DateTime(), nullable=False),
        sa.Column("expires_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_tokenblacklist_id"), "tokenblacklist", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_tokenblacklist_token"), "tokenblacklist", ["token"], unique=True
    )
    op.create_table(
        "apitoken",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
        sa.Column(
            "token", sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=False
        ),
        sa.Column(
            "prefix", sqlmodel.sql.sqltypes.AutoString(length=20), nullable=False
        ),
        sa.Column("permissions", sa.JSON(), nullable=True),
        sa.Column("last_used_at", sa.DateTime(), nullable=True),
        sa.Column("usage_count", sa.Integer(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("expires_at", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_apitoken_id"), "apitoken", ["id"], unique=False)
    op.create_index(op.f("ix_apitoken_prefix"), "apitoken", ["prefix"], unique=False)
    op.create_index(op.f("ix_apitoken_token"), "apitoken", ["token"], unique=True)
    op.create_index(op.f("ix_apitoken_user_id"), "apitoken", ["user_id"], unique=False)
    op.create_table(
        "closefriend",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("friend_id", sa.Uuid(), nullable=False),
        sa.Column("added_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["friend_id"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_closefriend_friend_id"), "closefriend", ["friend_id"], unique=False
    )
    op.create_index(op.f("ix_closefriend_id"), "closefriend", ["id"], unique=False)
    op.create_index(
        op.f("ix_closefriend_user_id"), "closefriend", ["user_id"], unique=False
    )
    op.create_table(
        "comment",
        sa.Column(
            "content", sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=False
        ),
        sa.Column("is_edited", sa.Boolean(), nullable=False),
        sa.Column("edited_at", sa.DateTime(), nullable=True),
        sa.Column("parent_comment_id", sa.Uuid(), nullable=True),
        sa.Column(
            "content_type", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False
        ),
        sa.Column("content_id", sa.Uuid(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("author_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["author_id"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["parent_comment_id"],
            ["comment.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "emailverificationtoken",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column(
            "email", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False
        ),
        sa.Column(
            "token", sqlmodel.sql.sqltypes.AutoString(length=500), nullable=False
        ),
        sa.Column("used", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("expires_at", sa.DateTime(), nullable=False),
        sa.Column("used_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_emailverificationtoken_email"),
        "emailverificationtoken",
        ["email"],
        unique=False,
    )
    op.create_index(
        op.f("ix_emailverificationtoken_id"),
        "emailverificationtoken",
        ["id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_emailverificationtoken_token"),
        "emailverificationtoken",
        ["token"],
        unique=False,
    )
    op.create_index(
        op.f("ix_emailverificationtoken_user_id"),
        "emailverificationtoken",
        ["user_id"],
        unique=False,
    )
    op.create_table(
        "follow",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("follower_id", sa.Uuid(), nullable=False),
        sa.Column("following_id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["follower_id"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["following_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_follow_follower_id"), "follow", ["follower_id"], unique=False
    )
    op.create_index(
        op.f("ix_follow_following_id"), "follow", ["following_id"], unique=False
    )
    op.create_index(op.f("ix_follow_id"), "follow", ["id"], unique=False)
    op.create_table(
        "passwordresettoken",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column(
            "token", sqlmodel.sql.sqltypes.AutoString(length=500), nullable=False
        ),
        sa.Column("used", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("expires_at", sa.DateTime(), nullable=False),
        sa.Column("used_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_passwordresettoken_id"), "passwordresettoken", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_passwordresettoken_token"),
        "passwordresettoken",
        ["token"],
        unique=False,
    )
    op.create_index(
        op.f("ix_passwordresettoken_user_id"),
        "passwordresettoken",
        ["user_id"],
        unique=False,
    )
    op.create_table(
        "profile",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("bio", sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
        sa.Column(
            "website_url", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True
        ),
        sa.Column(
            "location", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True
        ),
        sa.Column(
            "profile_image_url",
            sqlmodel.sql.sqltypes.AutoString(length=500),
            nullable=True,
        ),
        sa.Column(
            "cover_image_url",
            sqlmodel.sql.sqltypes.AutoString(length=500),
            nullable=True,
        ),
        sa.Column(
            "occupation", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True
        ),
        sa.Column(
            "company", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True
        ),
        sa.Column(
            "education", sqlmodel.sql.sqltypes.AutoString(length=200), nullable=True
        ),
        sa.Column(
            "phone_number", sqlmodel.sql.sqltypes.AutoString(length=20), nullable=True
        ),
        sa.Column(
            "contact_email", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True
        ),
        sa.Column(
            "twitter_url", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True
        ),
        sa.Column(
            "facebook_url", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True
        ),
        sa.Column(
            "instagram_url", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True
        ),
        sa.Column(
            "linkedin_url", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True
        ),
        sa.Column(
            "youtube_url", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True
        ),
        sa.Column(
            "portfolio_url", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True
        ),
        sa.Column(
            "professional_website",
            sqlmodel.sql.sqltypes.AutoString(length=255),
            nullable=True,
        ),
        sa.Column("is_profile_public", sa.Boolean(), nullable=False),
        sa.Column("show_email", sa.Boolean(), nullable=False),
        sa.Column("show_phone", sa.Boolean(), nullable=False),
        sa.Column("email_notifications", sa.Boolean(), nullable=False),
        sa.Column("push_notifications", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_profile_id"), "profile", ["id"], unique=False)
    op.create_index(op.f("ix_profile_user_id"), "profile", ["user_id"], unique=True)
    op.create_table(
        "securitylog",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=True),
        sa.Column(
            "event_type", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False
        ),
        sa.Column(
            "event_status", sqlmodel.sql.sqltypes.AutoString(length=20), nullable=False
        ),
        sa.Column(
            "ip_address", sqlmodel.sql.sqltypes.AutoString(length=45), nullable=True
        ),
        sa.Column(
            "user_agent", sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True
        ),
        sa.Column(
            "country", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True
        ),
        sa.Column("city", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
        sa.Column(
            "details", sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True
        ),
        sa.Column(
            "error_message", sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True
        ),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_securitylog_id"), "securitylog", ["id"], unique=False)
    op.create_index(
        op.f("ix_securitylog_user_id"), "securitylog", ["user_id"], unique=False
    )
    op.create_table(
        "token",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column(
            "token", sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=False
        ),
        sa.Column(
            "token_type",
            sa.Enum(
                "access",
                "refresh",
                "password_reset",
                "email_verification",
                "api",
                name="tokentype",
            ),
            nullable=False,
        ),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
        sa.Column(
            "status",
            sa.Enum("active", "expired", "revoked", "blacklisted", name="tokenstatus"),
            nullable=False,
        ),
        sa.Column("expires_at", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("last_used_at", sa.DateTime(), nullable=True),
        sa.Column("deactivated_at", sa.DateTime(), nullable=True),
        sa.Column("usage_count", sa.Integer(), nullable=False),
        sa.Column("usage_limit", sa.Integer(), nullable=True),
        sa.Column(
            "user_agent", sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True
        ),
        sa.Column(
            "ip_address", sqlmodel.sql.sqltypes.AutoString(length=45), nullable=True
        ),
        sa.Column(
            "country", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True
        ),
        sa.Column("city", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_token_id"), "token", ["id"], unique=False)
    op.create_index(op.f("ix_token_token"), "token", ["token"], unique=False)
    op.create_index(op.f("ix_token_user_id"), "token", ["user_id"], unique=False)
    op.create_table(
        "userblock",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("blocker_id", sa.Uuid(), nullable=False),
        sa.Column("blocked_id", sa.Uuid(), nullable=False),
        sa.Column(
            "reason", sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True
        ),
        sa.Column("blocked_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["blocked_id"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["blocker_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_userblock_blocked_id"), "userblock", ["blocked_id"], unique=False
    )
    op.create_index(
        op.f("ix_userblock_blocker_id"), "userblock", ["blocker_id"], unique=False
    )
    op.create_index(op.f("ix_userblock_id"), "userblock", ["id"], unique=False)
    op.create_table(
        "usercredentials",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column(
            "password_hash",
            sqlmodel.sql.sqltypes.AutoString(length=255),
            nullable=False,
        ),
        sa.Column("password_changed_at", sa.DateTime(), nullable=True),
        sa.Column("failed_login_attempts", sa.Integer(), nullable=False),
        sa.Column("locked_until", sa.DateTime(), nullable=True),
        sa.Column("last_login_at", sa.DateTime(), nullable=True),
        sa.Column(
            "last_login_ip", sqlmodel.sql.sqltypes.AutoString(length=45), nullable=True
        ),
        sa.Column("two_factor_enabled", sa.Boolean(), nullable=False),
        sa.Column(
            "two_factor_secret",
            sqlmodel.sql.sqltypes.AutoString(length=255),
            nullable=True,
        ),
        sa.Column(
            "backup_codes", sqlmodel.sql.sqltypes.AutoString(length=2000), nullable=True
        ),
        sa.Column("email_verified", sa.Boolean(), nullable=False),
        sa.Column("email_verified_at", sa.DateTime(), nullable=True),
        sa.Column("phone_verified", sa.Boolean(), nullable=False),
        sa.Column("phone_verified_at", sa.DateTime(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_usercredentials_id"), "usercredentials", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_usercredentials_user_id"), "usercredentials", ["user_id"], unique=True
    )
    op.create_table(
        "verificationrequest",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column(
            "verification_type",
            sa.Enum("journalist", "organization", "business", name="verificationtype"),
            nullable=False,
        ),
        sa.Column(
            "status",
            sa.Enum(
                "pending",
                "under_review",
                "approved",
                "rejected",
                "expired",
                name="verificationstatus",
            ),
            nullable=False,
        ),
        sa.Column(
            "full_name", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False
        ),
        sa.Column(
            "category", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False
        ),
        sa.Column(
            "description", sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True
        ),
        sa.Column(
            "contact_email",
            sqlmodel.sql.sqltypes.AutoString(length=100),
            nullable=False,
        ),
        sa.Column(
            "phone_number", sqlmodel.sql.sqltypes.AutoString(length=20), nullable=True
        ),
        sa.Column(
            "identification_document_url",
            sqlmodel.sql.sqltypes.AutoString(length=500),
            nullable=True,
        ),
        sa.Column(
            "articles_of_incorporation_url",
            sqlmodel.sql.sqltypes.AutoString(length=500),
            nullable=True,
        ),
        sa.Column(
            "official_website_url",
            sqlmodel.sql.sqltypes.AutoString(length=255),
            nullable=True,
        ),
        sa.Column("social_media_links", sa.JSON(), nullable=True),
        sa.Column("additional_documents", sa.JSON(), nullable=True),
        sa.Column("submitted_at", sa.DateTime(), nullable=False),
        sa.Column("reviewed_at", sa.DateTime(), nullable=True),
        sa.Column("reviewed_by", sa.Uuid(), nullable=True),
        sa.Column(
            "review_notes", sqlmodel.sql.sqltypes.AutoString(length=2000), nullable=True
        ),
        sa.Column(
            "rejection_reason",
            sqlmodel.sql.sqltypes.AutoString(length=500),
            nullable=True,
        ),
        sa.Column("badge_issued_at", sa.DateTime(), nullable=True),
        sa.Column("badge_expires_at", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["reviewed_by"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_verificationrequest_id"), "verificationrequest", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_verificationrequest_user_id"),
        "verificationrequest",
        ["user_id"],
        unique=False,
    )
    op.create_table(
        "bookmark",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("post_id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["post_id"],
            ["post.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_bookmark_post_id"), "bookmark", ["post_id"], unique=False)
    op.create_index(op.f("ix_bookmark_user_id"), "bookmark", ["user_id"], unique=False)
    op.create_table(
        "like",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("post_id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["post_id"],
            ["post.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_like_post_id"), "like", ["post_id"], unique=False)
    op.create_index(op.f("ix_like_user_id"), "like", ["user_id"], unique=False)
    op.create_table(
        "profileview",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("profile_id", sa.Uuid(), nullable=False),
        sa.Column("viewer_id", sa.Uuid(), nullable=True),
        sa.Column(
            "ip_address", sqlmodel.sql.sqltypes.AutoString(length=45), nullable=True
        ),
        sa.Column(
            "user_agent", sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True
        ),
        sa.Column("viewed_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["profile_id"],
            ["profile.id"],
        ),
        sa.ForeignKeyConstraint(
            ["viewer_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_profileview_id"), "profileview", ["id"], unique=False)
    op.create_index(
        op.f("ix_profileview_profile_id"), "profileview", ["profile_id"], unique=False
    )
    op.create_index(
        op.f("ix_profileview_viewed_at"), "profileview", ["viewed_at"], unique=False
    )
    op.create_index(
        op.f("ix_profileview_viewer_id"), "profileview", ["viewer_id"], unique=False
    )
    op.create_table(
        "verificationbadge",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("verification_request_id", sa.Uuid(), nullable=False),
        sa.Column(
            "badge_type",
            sa.Enum("journalist", "organization", "business", name="verificationtype"),
            nullable=False,
        ),
        sa.Column(
            "badge_name", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False
        ),
        sa.Column(
            "description", sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True
        ),
        sa.Column("issued_at", sa.DateTime(), nullable=False),
        sa.Column("expires_at", sa.DateTime(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["verification_request_id"],
            ["verificationrequest.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_verificationbadge_id"), "verificationbadge", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_verificationbadge_user_id"),
        "verificationbadge",
        ["user_id"],
        unique=False,
    )
    op.drop_constraint(
        op.f("externalnewsarticle_source_id_fkey"),
        "externalnewsarticle",
        type_="foreignkey",
    )
    op.create_foreign_key(
        op.f("externalnewsarticle_source_id_fkey_new"),
        "externalnewsarticle",
        "integrationnewssource",
        ["source_id"],
        ["id"],
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        op.f("externalnewsarticle_source_id_fkey_new"),
        "externalnewsarticle",
        type_="foreignkey",
    )
    op.create_foreign_key(
        op.f("externalnewsarticle_source_id_fkey"),
        "externalnewsarticle",
        "newssource",
        ["source_id"],
        ["id"],
    )
    op.drop_index(op.f("ix_verificationbadge_user_id"), table_name="verificationbadge")
    op.drop_index(op.f("ix_verificationbadge_id"), table_name="verificationbadge")
    op.drop_table("verificationbadge")
    op.drop_index(op.f("ix_profileview_viewer_id"), table_name="profileview")
    op.drop_index(op.f("ix_profileview_viewed_at"), table_name="profileview")
    op.drop_index(op.f("ix_profileview_profile_id"), table_name="profileview")
    op.drop_index(op.f("ix_profileview_id"), table_name="profileview")
    op.drop_table("profileview")
    op.drop_index(op.f("ix_like_user_id"), table_name="like")
    op.drop_index(op.f("ix_like_post_id"), table_name="like")
    op.drop_table("like")
    op.drop_index(op.f("ix_bookmark_user_id"), table_name="bookmark")
    op.drop_index(op.f("ix_bookmark_post_id"), table_name="bookmark")
    op.drop_table("bookmark")
    op.drop_index(
        op.f("ix_verificationrequest_user_id"), table_name="verificationrequest"
    )
    op.drop_index(op.f("ix_verificationrequest_id"), table_name="verificationrequest")
    op.drop_table("verificationrequest")
    op.drop_index(op.f("ix_usercredentials_user_id"), table_name="usercredentials")
    op.drop_index(op.f("ix_usercredentials_id"), table_name="usercredentials")
    op.drop_table("usercredentials")
    op.drop_index(op.f("ix_userblock_id"), table_name="userblock")
    op.drop_index(op.f("ix_userblock_blocker_id"), table_name="userblock")
    op.drop_index(op.f("ix_userblock_blocked_id"), table_name="userblock")
    op.drop_table("userblock")
    op.drop_index(op.f("ix_token_user_id"), table_name="token")
    op.drop_index(op.f("ix_token_token"), table_name="token")
    op.drop_index(op.f("ix_token_id"), table_name="token")
    op.drop_table("token")
    op.drop_index(op.f("ix_securitylog_user_id"), table_name="securitylog")
    op.drop_index(op.f("ix_securitylog_id"), table_name="securitylog")
    op.drop_table("securitylog")
    op.drop_index(op.f("ix_profile_user_id"), table_name="profile")
    op.drop_index(op.f("ix_profile_id"), table_name="profile")
    op.drop_table("profile")
    op.drop_index(
        op.f("ix_passwordresettoken_user_id"), table_name="passwordresettoken"
    )
    op.drop_index(op.f("ix_passwordresettoken_token"), table_name="passwordresettoken")
    op.drop_index(op.f("ix_passwordresettoken_id"), table_name="passwordresettoken")
    op.drop_table("passwordresettoken")
    op.drop_index(op.f("ix_follow_id"), table_name="follow")
    op.drop_index(op.f("ix_follow_following_id"), table_name="follow")
    op.drop_index(op.f("ix_follow_follower_id"), table_name="follow")
    op.drop_table("follow")
    op.drop_index(
        op.f("ix_emailverificationtoken_user_id"), table_name="emailverificationtoken"
    )
    op.drop_index(
        op.f("ix_emailverificationtoken_token"), table_name="emailverificationtoken"
    )
    op.drop_index(
        op.f("ix_emailverificationtoken_id"), table_name="emailverificationtoken"
    )
    op.drop_index(
        op.f("ix_emailverificationtoken_email"), table_name="emailverificationtoken"
    )
    op.drop_table("emailverificationtoken")
    op.drop_table("comment")
    op.drop_index(op.f("ix_closefriend_user_id"), table_name="closefriend")
    op.drop_index(op.f("ix_closefriend_id"), table_name="closefriend")
    op.drop_index(op.f("ix_closefriend_friend_id"), table_name="closefriend")
    op.drop_table("closefriend")
    op.drop_index(op.f("ix_apitoken_user_id"), table_name="apitoken")
    op.drop_index(op.f("ix_apitoken_token"), table_name="apitoken")
    op.drop_index(op.f("ix_apitoken_prefix"), table_name="apitoken")
    op.drop_index(op.f("ix_apitoken_id"), table_name="apitoken")
    op.drop_table("apitoken")
    op.drop_index(op.f("ix_tokenblacklist_token"), table_name="tokenblacklist")
    op.drop_index(op.f("ix_tokenblacklist_id"), table_name="tokenblacklist")
    op.drop_table("tokenblacklist")
    # ### end Alembic commands ###
